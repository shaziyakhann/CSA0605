def closest_subset_sum(arr, target):
    n = len(arr)
    mid = n // 2
    
    # Generate all possible sums for the first half
    sums1 = set()
    for mask in range(1 << mid):
        curr_sum = 0
        for i in range(mid):
            if mask & (1 << i):
                curr_sum += arr[i]
        sums1.add(curr_sum)
    
    # Generate all possible sums for the second half and find the closest sum
    min_diff = float('inf')
    closest_sum = 0
    for mask in range(1 << (n - mid)):
        curr_sum = 0
        for i in range(mid, n):
            if mask & (1 << (i - mid)):
                curr_sum += arr[i]
        
        # Find the closest sum in the first half
        diff = abs(target - curr_sum)
        if diff < min_diff:
            min_diff = diff
            closest_sum = curr_sum
        elif diff == min_diff and curr_sum < closest_sum:
            closest_sum = curr_sum
        
        # Check if the current sum plus any sum from the first half equals the target
        if target - curr_sum in sums1:
            return curr_sum + (target - curr_sum)
    
    return closest_sum

# Example usage
print(closest_subset_sum([45, 34, 4, 12, 5, 2], 42))  # Output: 41
print(closest_subset_sum([1, 3, 2, 7, 4, 6], 10))     # Output: 10
