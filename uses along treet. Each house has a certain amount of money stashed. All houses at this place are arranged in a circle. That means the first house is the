def rob_linear(houses):
    if not houses:
        return 0
    if len(houses) == 1:
        return houses[0]
    
    # Initialize dp array
    dp = [0] * len(houses)
    dp[0] = houses[0]
    dp[1] = max(houses[0], houses[1])
    
    # Fill dp array
    for i in range(2, len(houses)):
        dp[i] = max(dp[i - 1], dp[i - 2] + houses[i])
    
    return dp[-1]

def rob_circle(nums):
    if not nums:
        return 0
    if len(nums) == 1:
        return nums[0]
    
    # Case 1: Rob from first house to second last house
    max_rob_case_1 =
