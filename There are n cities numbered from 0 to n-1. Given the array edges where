def findTheCity(n, edges, distanceThreshold):
    # Initialize the distance matrix
    dist = [[float('inf')] * n for _ in range(n)]
    
    for i in range(n):
        dist[i][i] = 0
    
    for fromi, toi, weight in edges:
        dist[fromi][toi] = min(dist[fromi][toi], weight)
        dist[toi][fromi] = min(dist[toi][fromi], weight)
    
    # Apply Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    # Count reachable cities within distanceThreshold
    min_reachable_count = float('inf')
    city_with_max_index = -1
    
    for i in range(n):
        reachable_count = sum(1 for j in range(n) if dist[i][j] <= distanceThreshold)
        
        if (reachable_count < min_reachable_count) or (reachable_count == min_reachable_count and i > city_with_max_index):
            min_reachable_count = reachable_count
            city_with_max_index = i
            
    return city_with_max_index

# Example usage
n = 4
edges = [[0, 1, 3], [1, 2,
