def merge_sort(arr):
    global comparisons
    if len(arr) > 1:
        mid = len(arr) // 2  # Find the middle of the array
        left_half = arr[:mid]  # Divide the array into two halves
        right_half = arr[mid:]

        merge_sort(left_half)  # Sort the first half
        merge_sort(right_half)  # Sort the second half

        i = j = k = 0

        # Copy data to temporary arrays left_half and right_half
        while i < len(left_half) and j < len(right_half):
            comparisons += 1  # Increment comparison count
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        # Checking if any element was left
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

# Test cases
comparisons = 0

print("Test Case 1:")
N = 8
a = [12, 4, 78, 23, 45, 67, 89, 1]
merge_sort(a)
print(f"Input: N = {N}, a = {a}")
print(f"Output: {', '.join(map(str, a))}")
print(f"Comparisons: {comparisons}")

print("\nTest Case 2:")
comparisons = 0
N = 7
b = [38, 27, 43, 3, 9, 82, 10]
merge_sort(b)
print(f"Input: N = {N}, b = {b}")
print(f"Output: {', '.join(map(str, b))}")
print(f"Comparisons: {comparisons}")
