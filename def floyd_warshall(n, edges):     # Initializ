def floyd_warshall(n, edges):
    # Initialize the distance matrix
    dist = [[float('inf')] * n for _ in range(n)]
    
    # Set the distance from each city to itself to 0
    for i in range(n):
        dist[i][i] = 0
    
    # Set distances based on edges
    for u, v, weight in edges:
        dist[u][v] = weight
        dist[v][u] = weight  # Since the graph is undirected

    print("Distance Matrix before applying Floyd's Algorithm:")
    print_distance_matrix(dist)

    # Apply Floyd's Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    print("\nDistance Matrix after applying Floyd's Algorithm:")
    print_distance_matrix(dist)

    return dist

def print_distance_matrix(dist):
    for row in dist:
        print("\t".join(f"{d if d != float('inf') else 'âˆž':>3}" for d in row))

def count_neighbors_within_threshold(dist, threshold):
    count = 0
    n = len(dist)
    
    for i in range(n):
        neighbors = [j for j in range(n) if dist[i][j] <= threshold and i != j]
        count += len(neighbors)
        print(f"City {i} -> Neighbors within threshold: {neighbors}")
    
    return count

# Input
n = 5
edges = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]
distanceThreshold = 2

# Run Floyd-Warshall algorithm
distance_matrix = floyd_warshall(n, edges)

# Count and print neighbors within distance threshold
neighbor_count = count_neighbors_within_threshold(distance_matrix, distanceThreshold)

# Print total neighboring cities within threshold
print(f"\nTotal neighboring cities within distance threshold: {neighbor_count}")
