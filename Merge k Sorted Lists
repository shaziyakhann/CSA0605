class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeTwoLists(list1: ListNode, list2: ListNode) -> ListNode:
    # Create a dummy node to simplify the merging process
    dummy = ListNode()
    current = dummy  # This will point to the last node in the merged list

    # Traverse both lists
    while list1 and list2:
        if list1.val < list2.val:
            current.next = list1  # Append list1 node
            list1 = list1.next  # Move to the next node in list1
        else:
            current.next = list2  # Append list2 node
            list2 = list2.next  # Move to the next node in list2
        current = current.next  # Move the current pointer to the last node

    # If there are remaining nodes in either list, append them
    if list1:
        current.next = list1
    elif list2:
        current.next = list2

    # Return the merged list, which starts from the next of dummy
    return dummy.next

# Example usage
# Creating the first linked list: 1 -> 4 -> 5
list1 = ListNode(1, ListNode(4, ListNode(5)))

# Creating the second linked list: 1 -> 3 -> 4
list2 = ListNode(1, ListNode(3, ListNode(4)))

# Merging the two lists
merged_list = mergeTwoLists(list1, list2)

# Function to print the linked list
def printList(node):
    while node:
        print(node.val, end=" -> ")
        node = node.next
    print("None")

# Print the merged linked list
printList(merged_list)  # Output: 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> None
