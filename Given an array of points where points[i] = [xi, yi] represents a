import math

def median_of_medians(points, k):
    if len(points) <= 5:
        return sorted(points, key=lambda x: x[0]**2 + x[1]**2)[:k]

    medians = []
    for i in range(0, len(points), 5):
        chunk = points[i:i + 5]
        medians.append(sorted(chunk, key=lambda x: x[0]**2 + x[1]**2)[len(chunk) // 2])

    pivot = median_of_medians(medians, len(medians) // 2 + 1)

    left = [p for p in points if p[0]**2 + p[1]**2 < pivot[0]**2 + pivot[1]**2]
    right = [p for p in points if p[0]**2 + p[1]**2 > pivot[0]**2 + pivot[1]**2]

    if k <= len(left):
        return median_of_medians(left, k)
    elif k > len(points) - len(right):
        return median_of_medians(right, k - (len(points) - len(right)))
    else:
        return left + [pivot] + median_of_medians(right, k - len(left) - 1)

def kClosest(points, k):
    return median_of_medians
